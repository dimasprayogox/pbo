/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uts;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JFrame;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;

/**
 *
 * @author user
 */
public class manageProduk extends javax.swing.JFrame {

    /**
     * Creates new form home
     */
    private DefaultTableModel model;
    private String username; // Variabel untuk menyimpan username
    private String role; // Variabel untuk menyimpan role
    
    public manageProduk(String username, String role) {
        this.username = username;
        this.role = role;
        initComponents(); 
        
        // Periksa apakah username dan role null atau kosong
        if (username == null || username.isEmpty() || role == null || role.isEmpty()) {
            JOptionPane.showMessageDialog(this, "User  session is not valid.");
            dispose(); // Tutup form jika session tidak valid
            return;
        }
      
        model = new DefaultTableModel();
        tblProduk.setModel(model);
        
        // Menambahkan kolom ke model tabel
        model.addColumn("ID");
        model.addColumn("Kode Barang");
        model.addColumn("Nama Barang");
        model.addColumn("Kategori");
        model.addColumn("Harga Beli");
        model.addColumn("Harga Jual");
        model.addColumn("Stok");
        
        loadData();
        clearFields();
    }

    
    private void loadData() {
    model.setRowCount(0); // Clear existing data
        try (Connection connection = koneksi.getConnection()) {
            String sql = "SELECT p.id, p.kode_produk, p.nama_produk, k.nama_kategori, p.harga_beli, p.harga_jual, p.stok " +
                         "FROM produk p JOIN kategori k ON p.kategori_id = k.id"; // Mengambil data produk dan kategori
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                model.addRow(new Object[]{
                    resultSet.getInt("id"), // ID produk
                    resultSet.getString("kode_produk"),
                    resultSet.getString("nama_produk"),
                    resultSet.getString("nama_kategori"), // Nama kategori
                    resultSet.getDouble("harga_beli"),
                    resultSet.getDouble("harga_jual"),
                    resultSet.getInt("stok")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
}
    
private void clearFields() {
    txtKodeBarang.setText("");
    txtNamaBarang.setText("");
    txtHargaBeli.setText("");
    txtHargaJual.setText("");
    txtStok.setText("");
    cmbKategori.setSelectedIndex(0); // Reset ke pilihan default
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtKodeBarang = new javax.swing.JTextField();
        txtHargaBeli = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduk = new javax.swing.JTable();
        btnTambah = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtNamaBarang = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtHargaJual = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtStok = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtTambahStok = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnTambahStok = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        cmbKategori = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(54, 48, 98));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(248, 243, 243));
        jLabel1.setText("Nama Admin");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(248, 243, 243));
        jLabel10.setText("Manage Produk");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel10))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel5.setText("Harga Beli");

        jLabel6.setText("Kode Barang");

        jLabel8.setText("Harga Jual");

        tblProduk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Kode Barang", "Nama Barang", "Harga Beli", "Harga Jual", "Stok", "Kategori"
            }
        ));
        tblProduk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProdukMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProduk);

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(54, 48, 98));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(248, 243, 243));
        jLabel11.setText("Toko Ramayani");

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Jl. Kenangan No. 10 Madiun");

        jButton3.setText("Keluar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(jLabel11))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 407, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addContainerGap(9, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(22, 22, 22))
        );

        jLabel13.setText("Nama Barang");

        jLabel14.setText("Rp.");

        jLabel15.setText("Rp.");

        jLabel2.setText("Stok");

        jLabel3.setText("Cari Berdasarkan Nama");

        btnSearch.setText("Cari");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel4.setText("Tambah Stok");

        jLabel9.setText("Jumlah");

        btnTambahStok.setText("Tambah Stok");
        btnTambahStok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahStokActionPerformed(evt);
            }
        });

        jLabel16.setText("Kategori");

        cmbKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Pilih Kategori -", "T-Shirt", "Crewneck", "Kemeja", "Jaket", "Celana", "Sepatu", "Sandal", "Aksesoris", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel15)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(jLabel5)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel14))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel8)
                                                            .addComponent(jLabel2)
                                                            .addComponent(jLabel16))
                                                        .addGap(0, 0, Short.MAX_VALUE)))
                                                .addGap(63, 63, 63))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(72, 72, 72)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtKodeBarang)
                                            .addComponent(txtHargaJual, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                            .addComponent(txtHargaBeli)
                                            .addComponent(txtStok)
                                            .addComponent(txtNamaBarang)
                                            .addComponent(cmbKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(88, 88, 88))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel13)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnTambah)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnHapus)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnUbah)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnClear))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(txtTambahStok, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnTambahStok))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(106, 106, 106)))))
                        .addGap(15, 15, 15)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtKodeBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNamaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHargaBeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHargaJual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtStok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnTambah)
                        .addComponent(btnHapus)
                        .addComponent(btnUbah)
                        .addComponent(btnClear))
                    .addComponent(btnTambahStok)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTambahStok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        home mainMenu = home.getInstance(username, role); // Gunakan instance tunggal
        mainMenu.setMenuEnabled(true, role); // Aktifkan menu sesuai role
        mainMenu.setVisible(true);
        dispose(); 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        String kode_barang = txtKodeBarang.getText();
    String nama_barang = txtNamaBarang.getText();
    String kategori = (String) cmbKategori.getSelectedItem(); // Mengambil kategori yang dipilih
    String harga_beli = txtHargaBeli.getText();
    String harga_jual = txtHargaJual.getText();
    String stok = txtStok.getText();

    // Validasi input
    if (kode_barang.isEmpty() || nama_barang.isEmpty() || kategori == null || 
        harga_beli.isEmpty() || harga_jual.isEmpty() || stok.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!");
        return;
    }

    try (Connection connection = koneksi.getConnection()) {
        // Mendapatkan id kategori berdasarkan nama kategori
        String sqlKategori = "SELECT id FROM kategori WHERE nama_kategori = ?";
        PreparedStatement stmtKategori = connection.prepareStatement(sqlKategori);
        stmtKategori.setString(1, kategori);
        ResultSet rsKategori = stmtKategori.executeQuery();

        int kategoriId = 0;
        if (rsKategori.next()) {
            kategoriId = rsKategori.getInt("id");
        } else {
            JOptionPane.showMessageDialog(this, "Kategori tidak ditemukan!");
            return;
        }

        // Menyimpan data produk ke tabel produk
        String sql = "INSERT INTO produk (kode_produk, nama_produk, kategori_id, harga_beli, harga_jual, stok) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, kode_barang);
        statement.setString(2, nama_barang);
        statement.setInt(3, kategoriId); // Menggunakan id kategori
        statement.setDouble(4, Double.parseDouble(harga_beli)); // Mengonversi harga beli ke double
        statement.setDouble(5, Double.parseDouble(harga_jual)); // Mengonversi harga jual ke double
        statement.setInt(6, Integer.parseInt(stok)); // Mengonversi stok ke integer
        statement.executeUpdate();

        JOptionPane.showMessageDialog(this, "Produk berhasil ditambahkan!");
        loadData(); // Refresh the table
        clearFields(); // Clear input fields
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error saving product: " + e.getMessage());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Harga dan stok harus berupa angka!");
    }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblProduk.getSelectedRow();
    if (selectedRow != -1) {
        // Mengambil ID produk dari baris yang dipilih
        int id = (int) model.getValueAt(selectedRow, 0); // ID produk

        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus produk ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection connection = koneksi.getConnection()) {
                // Hapus produk
                String sqlDelete = "DELETE FROM produk WHERE id = ?";
                PreparedStatement statement = connection.prepareStatement(sqlDelete);
                statement.setInt(1, id);
                statement.executeUpdate();

                JOptionPane.showMessageDialog(this, "Produk berhasil dihapus!");
                loadData(); // Refresh the table
                clearFields(); // Clear input fields
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error deleting product: " + e.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin dihapus.");
    }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblProduk.getSelectedRow();
    if (selectedRow != -1) {
        // Mengambil ID produk dari baris yang dipilih
        int id = (int) model.getValueAt(selectedRow, 0); // ID produk

        // Mengambil data dari input fields
        String kode_produk = txtKodeBarang.getText();
        String nama_produk = txtNamaBarang.getText();
        String kategori = (String) cmbKategori.getSelectedItem();
        double harga_beli = Double.parseDouble(txtHargaBeli.getText());
        double harga_jual = Double.parseDouble(txtHargaJual.getText());
        int stok = Integer.parseInt(txtStok.getText());

        try (Connection connection = koneksi.getConnection()) {
            // Mendapatkan id kategori berdasarkan nama kategori
            String sqlKategori = "SELECT id FROM kategori WHERE nama_kategori = ?";
            PreparedStatement stmtKategori = connection.prepareStatement(sqlKategori);
            stmtKategori.setString(1, kategori);
            ResultSet rsKategori = stmtKategori.executeQuery();

            int kategoriId = 0;
            if (rsKategori.next()) {
                kategoriId = rsKategori.getInt("id");
            } else {
                JOptionPane.showMessageDialog(this, "Kategori tidak ditemukan!");
                return;
            }

            // Update produk
            String sqlUpdate = "UPDATE produk SET kode_produk = ?, nama_produk = ?, kategori_id = ?, harga_beli = ?, harga_jual = ?, stok = ? WHERE id = ?";
            PreparedStatement statement = connection.prepareStatement(sqlUpdate);
            statement.setString(1, kode_produk);
            statement.setString(2, nama_produk);
            statement.setInt(3, kategoriId);
            statement.setDouble(4, harga_beli);
            statement.setDouble(5, harga_jual);
            statement.setInt(6, stok);
            statement.setInt(7, id);
            statement.executeUpdate();

            JOptionPane.showMessageDialog(this, "Produk berhasil diperbarui!");
            loadData(); // Refresh the table
            clearFields(); // Clear input fields
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating product: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Harga dan stok harus berupa angka!");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin diperbarui.");
    }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearFields();
        loadData();
    }//GEN-LAST:event_btnClearActionPerformed

    private void tblProdukMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProdukMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblProduk.getSelectedRow();
    if (selectedRow != -1) {
        // Mengisi field input dengan data dari baris yang dipilih
        txtKodeBarang.setText(model.getValueAt(selectedRow, 1).toString()); // Kode Produk
        txtNamaBarang.setText(model.getValueAt(selectedRow, 2).toString()); // Nama Produk
        cmbKategori.setSelectedItem(model.getValueAt(selectedRow, 3).toString()); // Kategori
        txtHargaBeli.setText(model.getValueAt(selectedRow, 4).toString()); // Harga Beli
        txtHargaJual.setText(model.getValueAt(selectedRow, 5).toString()); // Harga Jual
        txtStok.setText(model.getValueAt(selectedRow, 6).toString()); // Stok
    }
    }//GEN-LAST:event_tblProdukMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
         String searchQuery = txtSearch.getText().trim();
    model.setRowCount(0); // Clear existing data

    try (Connection connection = koneksi.getConnection()) {
        String sql = "SELECT p.id, p.kode_produk, p.nama_produk, k.nama_kategori, p.harga_beli, p.harga_jual, p.stok " +
                     "FROM produk p JOIN kategori k ON p.kategori_id = k.id " +
                     "WHERE p.nama_produk LIKE ?"; // Pencarian berdasarkan nama produk
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, "%" + searchQuery + "%"); // Menambahkan wildcard untuk pencarian
        ResultSet resultSet = statement.executeQuery();

        while (resultSet.next()) {
            model.addRow(new Object[]{
                resultSet.getInt("id"), // ID produk
                resultSet.getString("kode_produk"),
                resultSet.getString("nama_produk"),
                resultSet.getString("nama_kategori"), // Nama kategori
                resultSet.getDouble("harga_beli"),
                resultSet.getDouble("harga_jual"),
                resultSet.getInt("stok")
            });
        }

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada produk yang ditemukan.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching product: " + e.getMessage());
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnTambahStokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahStokActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblProduk.getSelectedRow();
    if (selectedRow != -1) {
        // Mengambil ID produk dari baris yang dipilih
        int id = (int) model.getValueAt(selectedRow, 0); // ID produk

        // Mengambil jumlah stok yang ingin ditambahkan
        try {
            int additionalStock = Integer.parseInt(txtTambahStok.getText().trim());

            // Validasi jumlah stok
            if (additionalStock <= 0) {
                JOptionPane.showMessageDialog(this, "Jumlah stok yang ditambahkan harus lebih dari 0.");
                return;
            }

            // Mengambil stok saat ini
            int currentStock = (int) model.getValueAt(selectedRow, 6); // Stok saat ini

            // Menghitung stok baru
            int newStock = currentStock + additionalStock;

            // Update stok di database
            try (Connection connection = koneksi.getConnection()) {
                String sqlUpdate = "UPDATE produk SET stok = ? WHERE id = ?";
                PreparedStatement statement = connection.prepareStatement(sqlUpdate);
                statement.setInt(1, newStock);
                statement.setInt(2, id);
                statement.executeUpdate();

                JOptionPane.showMessageDialog(this, "Stok berhasil ditambahkan!");
                loadData(); // Refresh the table
                txtTambahStok.setText(""); // Clear input field
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah stok harus berupa angka!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating stock: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin ditambahkan stoknya.");
    }
    }//GEN-LAST:event_btnTambahStokActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageProduk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageProduk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageProduk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageProduk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        String username = UserSession.getInstance().getUsername(); // Ambil username dari UserSession
        String role = UserSession.getInstance().getRole(); // Ambil role dari UserSession

        // Cek apakah username dan role valid
        if (username == null || role == null) {
            JOptionPane.showMessageDialog(null, "User  session is not valid.");
            return; // Keluar jika session tidak valid
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageProduk(username, role).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnTambahStok;
    private javax.swing.JButton btnUbah;
    private javax.swing.JComboBox<String> cmbKategori;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProduk;
    private javax.swing.JTextField txtHargaBeli;
    private javax.swing.JTextField txtHargaJual;
    private javax.swing.JTextField txtKodeBarang;
    private javax.swing.JTextField txtNamaBarang;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStok;
    private javax.swing.JTextField txtTambahStok;
    // End of variables declaration//GEN-END:variables
}
